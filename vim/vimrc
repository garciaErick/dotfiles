"set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required Plugin 'VundleVim/Vundle.vim' 
Plugin 'sheerun/vim-polyglot'
Plugin 'kristijanhusak/vim-hybrid-material'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-vinegar'
Plugin 'w0rp/ale' "Syntax Checking
" Plugin 'scrooloose/syntastic'         "Syntax Cheking
Plugin 'scrooloose/nerdTree'          " IDE-like file manager
Plugin 'bkad/CamelCaseMotion'         " Detect camel case
Plugin 'ctrlpvim/ctrlp.vim'           " IntelliJ-like file searching
Plugin 'tpope/vim-sensible'           " Starting point
Plugin 'tpope/vim-surround'           " Surround with characters with cs command
Plugin 'tpope/vim-commentary'         " Comment plugin by gcc command
Plugin 'tpope/vim-markdown'           " Markdown syntax highlighting
Plugin 'terryma/vim-multiple-cursors' " Sublime text-like multiple cursors
" Plugin 'Valloric/YouCompleteMe'       " Autocomplete as you type
Plugin 'junegunn/vim-easy-align'      " Alignnent plugin with <ga>
Plugin 'jiangmiao/auto-pairs'         " Auto-closing brackets plugin
Plugin 'xolox/vim-misc'               " Xolox plugins dependencies
Plugin 'Yggdroot/indentLine'          " Indent Lines Plugin
Plugin 'terryma/vim-smooth-scroll'    " Vim smooth scrolling
" Snippets Section
" Vim Snipmate Dependencies
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'
" Plugin 'garbas/vim-snipmate' 
Plugin 'SirVer/ultisnips'             "Snippets engine
Plugin 'ervandew/supertab'            "For YCM and Ultisnips integration
Plugin 'honza/vim-snippets'           "Collection of vim snippets
call vundle#end()            " required

" ================ General Config ====================
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"
set background=dark
set linebreak
set textwidth=60
set backspace=indent,eol,start
set gcr=a:blinkon0
set noshowmode
set hidden
set number
set autoread 
set t_Co=256
set cursorline
colorscheme base16-material
let g:enable_bold_font = 1
let g:enable_italic_font = 1
autocmd ColorScheme * highlight LineNr ctermfg=grey ctermbg=none
autocmd ColorScheme * highlight Visual ctermfg=none ctermbg=239
autocmd ColorScheme * highlight Pmenu ctermfg=02 ctermbg=19
autocmd ColorScheme * highlight PmenuSel ctermfg=02 
autocmd ColorScheme * highlight Folded ctermbg=none
autocmd ColorScheme * highlight VertSplit ctermbg=none
autocmd ColorScheme * highlight VertSplit ctermbg=none
autocmd ColorScheme * highlight VertSplit ctermbg=none
autocmd ColorScheme * highlight CursorLineNr ctermbg=19 ctermfg=white 
" autocmd ColorScheme * highlight StatusLine ctermfg=none
autocmd ColorScheme * highlight SignColumn ctermfg=none ctermbg=none
autocmd ColorScheme * highlight CursorLine ctermbg=19

set pastetoggle=<F2> "To enter paste mode to avoid indent issues
set clipboard=unnamed
syntax enable
syntax on
let g:enable_bold_font=1
" Highlighting
hi Search cterm=bold,underline ctermfg=blue ctermbg=black

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>
set mouse=a
"Force to save files that require root permissions
cmap w!! %!sudo tee > /dev/null % "


" ================ Camel Case==============
"Detect camel case
call camelcasemotion#CreateMotionMappings('<leader>')
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" ================ Indentation ======================
set autoindent
set cindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>
filetype plugin on
filetype indent on
" Turn off auto insert comments
augroup auto_comment
  au!
  au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END
" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:·
" set nowrap       "Don't wrap lines
set wrap
set linebreak    "Wrap lines at convenient points

" ================ Folds ============================
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ================ Scrolling ========================
set scrolloff=20         "Start scrolling when we're x lines away from margins
set sidescrolloff=15
set sidescroll=1

" ================ Search ===========================
set incsearch       " Find the next match as we type the search
set hlsearch        " Highlight searches by default
set ignorecase      " Ignore case when searching...
set smartcase       " ...unless we type a capital

" ================ Airline ====================
set laststatus=2
let g:airline_theme='deus'
let g:airline_powerline_fonts=1
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" ================ NerdTREE  ====================
"Start NERDTree if vim starts with no arguments
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
autocmd StdinReadPre * let s:std_in=1
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ================ Syntastic ====================
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" ================ Easy Align ====================
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ================ YouCompleteMe ====================
"Integrated with SuperTab with Ultisnips
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
" let g:ycm_global_ycm_extra_conf = "/home/egarcia87/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
let g:EclimCompletionMethod = 'omnifunc'

" ================ SuperTab ====================
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = -1

" ================ Ultisnips ====================
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" ================ IndentLine ====================
" Vim
let g:indentLine_color_term = 239
"GVim
let g:indentLine_color_gui = '#A4E57E'
" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

" ================ Functions ====================
map <F7> mzgg=G`z
nmap <F11> :tabp <cr>
nmap <F12> :tabn <cr>

" ================ Smooth Scrolling ====================
noremap <silent> <c-k> :call smooth_scroll#up(&scroll, 10, 2)<CR>
noremap <silent> <c-j> :call smooth_scroll#down(&scroll, 10, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>

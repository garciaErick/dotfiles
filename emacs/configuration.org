* hello
** my name
*** is Erick
#+BEGIN_SRC emacs-lisp
    (require 'package)

    ;; (setq url-proxy-services
    ;;      '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
    ;;        ("http" . "web-proxy.houston.hpecorp.net:8080")
    ;;        ("https" . "web-proxy.houston.hpecorp.net:8080")))

    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                        (not (gnutls-available-p))))
           (proto (if no-ssl "http" "https")))
      ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
      (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
      (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
      (when (< emacs-major-version 24)
        (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

    (package-initialize)

    ;; General Emacs configuration

    (setq user-full-name "Erick Garcia"
          user-mail-address "me@erick-garcia.com"
          )

    (load-file "~/.emacs.d/sensible-defaults.el")
    (sensible-defaults/use-all-settings)
    (sensible-defaults/use-all-keybindings)
    (sensible-defaults/backup-to-temp-directory)
    (setq auto-save-file-name-transforms
          `((".*" ,(concat user-emacs-directory "auto-save/") t)))


    (if (not (package-installed-p 'use-package))
        (progn
          (package-refresh-contents)
          (package-install 'use-package)))

    (require 'use-package)

    ;; use-package
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (setq use-package-verbose t)
    (setq use-package-always-ensure t)

    (use-package auto-compile
      :config (auto-compile-on-load-mode))
    (setq load-prefer-newer t)

    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 2)
    (setq indent-line-function 'insert-tab)
    (global-subword-mode 1)
    (menu-bar-mode -1)
    (xterm-mouse-mode 1)
    (savehist-mode 1)
    (global-linum-mode t)
    (setq linum-format "%4d \u2502 ")
    (global-hl-line-mode 1)
    (set-face-background 'hl-line "color-19")
    (set-face-foreground 'highlight nil)
          ;; (set-face-foreground 'font-lock-comment-face "brightblack")
    (set-face-background 'linum "black")
    (set-face-attribute 'region nil :background "color-18")
    ;; (set-face-attribute 'region nil :foreground "blue")

       (use-package evil
       :ensure t
       :config
       (evil-mode)
       )

     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode 1))

    (use-package projectile
      :ensure t
      :config
      (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
      )

    (use-package org
    :config
    (progn
      (defun imalison:org-inline-css-hook (exporter)
        "Insert custom inline css to automatically set the
  background of code to whatever theme I'm using's background"
        (when (eq exporter 'html)
          (let* ((my-pre-bg (face-background 'default))
                 (my-pre-fg (face-foreground 'default)))
            (setq
             org-html-head-extra
             (concat
              org-html-head-extra
              (format "<style type=\"text/css\">\n pre.src {background-color: #2c2c36; color: #959dcb;} pre.example { background-color: #2c2c36; color: #959dcb;} </style>\n"
                      my-pre-bg my-pre-fg))))))

      (add-hook 'org-export-before-processing-hook 'imalison:org-inline-css-hook)))

    (setq org-src-fontify-natively t)

(defconst lisp--prettify-symbols-alist
  '(("lambda"  . ?λ)))

    (global-prettify-symbols-mode +1)

    (use-package base16-theme
      :ensure t
      :config
      (setq base16-theme-256-color-source "terminal")
      (load-theme 'base16-material)
      )


(global-prettify-symbols-mode 1)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (python . t)
       ))

    (use-package org-bullets
      :init
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-bullets-bullet-list '("◉"))
      :config
      )

(add-hook 'scheme-mode-hook 'my-pretty-lambda)
    (setq org-hide-leading-stars t)
    (setq org-bullets-face-name (quote org-bullet-face))
    (setq org-ellipsis "⤵")
    (setq org-src-tab-acts-natively t)

    (setq org-src-window-setup 'current-window)

    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-with-smart-quotes t)
    (setq org-html-htmlize-output-type `nil)
    ;;(add-hook 'org-mode-hook 'flyspell-mode)

    (use-package htmlize
      :ensure t
      )

    (use-package centered-cursor-mode
      :ensure t
      :config
      (global-centered-cursor-mode +1)
      )

    (use-package aggressive-indent
      :ensure t
      :config
      (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
      (add-hook 'css-mode-hook #'aggressive-indent-mode)
      (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
      )

    ;; (use-package material-theme
    ;;   :config
    ;;   :ensure t)
    ;; (load-theme 'material t)

    (use-package undo-tree
      :ensure t
      :config
      (setq undo-tree-auto-save-history t)
      )

    (use-package powerline
      :ensure t
      :config
      (powerline-center-evil-theme)

      ;; (use-package flycheck-color-mode-line
      ;;              :ensure t
      ;;              :config
      ;;              (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
      )
#+END_SRC

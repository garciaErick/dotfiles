#+TITLE: Emacs Configuration
#+AUTHOR: Erick Garcia
#+EMAIL: me@erick-garcia.com
#+OPTIONS: toc:nil num:nil

* General Configuration
** Sensible defaults
These are some defaults everyone can agree with, [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]], by Harry R. Shwarts.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
(setq auto-save-file-name-transforms
				`((".*" ,(concat user-emacs-directory "auto-save/") t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Erick Garcia"
user-mail-address "me@erick-garcia.com"
)
#+END_SRC
** UI Preferences
Just setting some global settings such as use camelCase, line numbers, highlight current line, etc...

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
(menu-bar-mode -1)
(xterm-mouse-mode 1)
(savehist-mode 1)
(global-linum-mode t)
(setq linum-format "%4d \u2502 ")
(global-hl-line-mode 1)
(visual-line-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Indentation settings
I like to use tabs that are 2 spaces in width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 1)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+END_SRC

** Custom color settings
#+BEGIN_SRC emacs-lisp
(require 'hi-lock)
(set-face-background 'hl-line "color-19")
(set-face-background 'linum "black")
(set-face-attribute 'region nil :background "color-18")
(set-face-background 'mode-line "color-18")
(set-face-background 'mode-line-inactive "color-18")
(set-face-background 'isearch "color-18")
(set-face-foreground 'isearch "white")
(set-face-background 'hi-yellow "color-18")
(set-face-foreground 'hi-yellow "white")
(set-face-foreground 'highlight "white")
#+END_SRC

* Package Settings
** Proxy
Some proxy settings to be used when needed, comment out if no proxy is needed
#+BEGIN_SRC emacs-lisp
(setq url-proxy-services
 '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
   ("http" . "web-proxy.houston.hpecorp.net:8080")
   ))
#+END_SRC

** Melpa
Load the Melpa package repository because I am not a savage
#+BEGIN_SRC emacs-lisp
(require 'package)
 ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
 (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
 (when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "://elpa.gnu.org/packages/")))

(package-initialize)
#+END_SRC

** Use-package
  Use-package is great for packagement, ensure its installed and refresh package contents

#+BEGIN_SRC emacs-lisp
  (if (not (package-installed-p 'use-package))
   (progn
    (package-refresh-contents)
    (package-install 'use-package)))


  (unless (package-installed-p 'use-package)
   (package-install 'use-package))

  (setq use-package-verbose t)
(setq use-package-always-ensure t)

  (use-package auto-compile
   :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(require 'use-package)
#+END_SRC

* Color Theme
I use a base16 material palenight variant for my theme, remember that you have to
have a compatible base16 shell theme in order for this to work when running emacs
from a terminal. You can get the theme I'm using from /colors/
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :ensure t
    :config
    (setq base16-theme-256-color-source "terminal")
    (load-theme 'base16-material)
    )
#+END_SRC
Additionally you can use the material color theme when running Gui Emacs
#+BEGIN_SRC emacs-lisp
  ;; (use-package material-theme
  ;;   :config
  ;;   :ensure t)
  ;; (load-theme 'material t)
#+END_SRC
* Evil
[[https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png]]

Evil is an extensible *vi* layer for Emacs. Emacs is the better environment, however I would never switch without
being able to swiftly move through code like in Vim.

#+BEGIN_SRC emacs-lisp
  (use-package
    evil
    :ensure t
    :config
    (evil-mode)
    )

  (defun highlight-remove-all ()
    (interactive)
    (hi-lock-mode -1)
    (hi-lock-mode 1))

  (defun search-highlight-persist ()
    (highlight-regexp (car-safe (if isearch-regexp
                                    regexp-search-ring
                                  search-ring)) (facep 'hi-yellow)))

  (defadvice isearch-exit (after isearch-hl-persist activate)
    (highlight-remove-all)
    (search-highlight-persist))

  (defadvice evil-search-incrementally (after evil-search-hl-persist activate)
    (highlight-remove-all)
    (search-highlight-persist))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package projectile
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
    )
#+END_SRC

* Org-mode
** General Org Config
Just configuring org mode general settings such as export, evaluating code blocks, hide trailing stars, etc.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (progn
      (defun imalison:org-inline-css-hook (exporter)
        "Insert custom inline css to automatically set the
    background of code to whatever theme I'm using's background"
        (when (eq exporter 'html)
          (let* ((my-pre-bg (face-background 'default))
                 (my-pre-fg (face-foreground 'default)))
            (setq
             org-html-head-extra
             (concat
              org-html-head-extra
              (format "<style type=\"text/css\">\n pre.src {background-color: #2c2c36; color: #959dcb;} pre.example { background-color: #2c2c36; color: #959dcb;} </style>\n"
                      my-pre-bg my-pre-fg))))))

      (add-hook 'org-export-before-processing-hook 'imalison:org-inline-css-hook)))

  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (setq org-src-fontify-natively t)

  (defconst lisp--prettify-symbols-alist
    '(("lambda"  . ?λ)))

  (global-prettify-symbols-mode +1)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     ))

  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("◉"))
    :config
    )

  (add-hook 'scheme-mode-hook 'my-pretty-lambda)
  (setq org-hide-leading-stars t)
  (setq org-bullets-face-name (quote org-bullet-face))
  (setq org-ellipsis "⤵")
  (setq org-src-tab-acts-natively t)

  (setq org-src-window-setup 'current-window)

  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-html-htmlize-output-type `nil)
  ;;(add-hook 'org-mode-hook 'flyspell-mode)

  (use-package htmlize
    :ensure t
    )
#+END_SRC
** GTD (Getting Things Done)
Getting Things Done is a time management method, in short there are several lists:
1. inbox.org: All TODO's go to here first and it is constantly being refiled to other lists
2. gtd.org: All projects get sent here, these are usually lists with tags, contexts and multiple items.
3. someday.org: Items that are waiting on some other items, or don't have a fixed deadline go here.
4. tickler.org: Itmes with fixed deadlines get sent here, these are usually appointments, e.g: Dentist appointment

For a more detailed explanation go [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][here]]

#+BEGIN_SRC emacs-lisp
(setq org-hierarchical-todo-statistics nil)
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-directory "~/org")
  (setq org-inbox-file "~/org/inbox.org")
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC
*** Key bindings
Some keybindings for opening inbox, storing links, opening agenda, capturing some items based on the templates, and archiving a todo item
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i") 'hrs/open-inbox-file)
  (global-set-key (kbd "C-c l") 'org-store-link) ;;Store current file path link
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC
*** General org configuration
Just some general settings as setting the org-templates, agenda files, and refile targets.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/inbox.org"
                           "~/org/gtd.org"
                           "~/org/tickler.org"
                           "~/org/someday.org"
                           ))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/org/inbox.org" "Tasks")
                                 "* TODO %i%? [/]")
                                ("T" "Tickler" entry
                                 (file+headline "~/org/tickler.org" "Tickler")
                                 "* %i%? \n %U")))
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-tag-alist '(("@work" . ?w)
                        ("@home" . ?h)
                        ("@japanese" . ?j)
                        ("@download" . ?d)
                        ("@learning" . ?l)
                        ))

  (setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                             ("~/org/someday.org" :level . 1)
                             ("~/org/tickler.org" :maxlevel . 2)))

  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling

  (defun hrs/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (setq org-log-done 'time)

  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (defun hrs/open-inbox-file ()
    "Open the master org TODO list."
    (interactive)
    (find-file org-inbox-file)
    (flycheck-mode -1)
    (end-of-buffer))

#+END_SRC

* Other Packages
#+BEGIN_SRC emacs-lisp
  (use-package centered-cursor-mode
    :ensure t
    :config
    (global-centered-cursor-mode +1)
    )

  (use-package aggressive-indent
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'css-mode-hook #'aggressive-indent-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    )


  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history t)
    )

  (use-package powerline
    :ensure t
    :config
    (set-face-background 'powerline-inactive1 "color-18")
    (set-face-background 'powerline-inactive2 "color-18")
    (set-face-background 'powerline-active2 "color-18")
    (powerline-center-evil-theme)

    ;; (use-package flycheck-color-mode-line
    ;;              :ensure t
    ;;              :config
    ;;              (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
    )

#+END_SRC

#+RESULTS:
: t

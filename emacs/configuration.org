#+TITLE: Emacs Configuration
#+AUTHOR: Erick Garcia
#+EMAIL: me@erick-garcia.com
#+OPTIONS: toc:nil num:nil

* General Configuration

** Sensible defaults
These are some defaults everyone can agree with, [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]], by Harry R. Shwarts.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
(setq auto-save-file-name-transforms
				`((".*" ,(concat user-emacs-directory "auto-save/") t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Erick Garcia"
user-mail-address "me@erick-garcia.com"
)
#+END_SRC

Some required packages in order for config to work
#+BEGIN_SRC emacs-lisp
(require 'package)
(require 'use-package)
(require 'hi-lock)
#+END_SRC

** Global modes
Just setting some global settings such as use camelCase, line numbers, highlight current line, etc...
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
(menu-bar-mode -1)
(xterm-mouse-mode 1)
(savehist-mode 1)
(global-linum-mode t)
(setq linum-format "%4d \u2502 ")
(global-hl-line-mode 1)
#+END_SRC
** Indentation settings
I like to use tabs that are 2 spaces in width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 1)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+END_SRC
** Custom color settings
#+BEGIN_SRC emacs-lisp
(set-face-background 'hl-line "color-19")
(set-face-background 'linum "black")
(set-face-attribute 'region nil :background "color-18")
(set-face-background 'mode-line "color-18")
(set-face-background 'mode-line-inactive "color-18")
(set-face-background 'isearch "color-18")
(set-face-foreground 'isearch "white")
(set-face-background 'hi-yellow "color-18")
(set-face-foreground 'hi-yellow "white")
(set-face-foreground 'highlight "white")
#+END_SRC

* Connection Settings
Some proxy settings to be used when needed, comment out if no proxy is needed
#+begin_src emacs-lisp
(setq url-proxy-services
								'(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
								("http" . "web-proxy.houston.hpecorp.net:8080")
								("https" . "web-proxy.houston.hpecorp.net:8080")))

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
																				(not (gnutls-available-p))))
								(proto (if no-ssl "http" "https")))
				;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
				(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
				(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
				(when (< emacs-major-version 24)
				(add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)
#+end_src

* Package management
Use-package is great for packagement, ensure its installed and refresh package contents
#+BEGIN_SRC emacs-lisp
(if (not (package-installed-p 'use-package))
				(progn
								(package-refresh-contents)
								(package-install 'use-package)))


(unless (package-installed-p 'use-package)
				(package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(use-package auto-compile
				:config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp

				(use-package
				evil
								:ensure t
								:config
								(evil-mode)
								)

				(defun highlight-remove-all ()
								(interactive)
								(hi-lock-mode -1)
								(hi-lock-mode 1))

				(defun search-highlight-persist ()
								(highlight-regexp (car-safe (if isearch-regexp
																																								regexp-search-ring
																																				search-ring)) (facep 'hi-yellow)))

				(defadvice isearch-exit (after isearch-hl-persist activate)
								(highlight-remove-all)
								(search-highlight-persist))

				(defadvice evil-search-incrementally (after evil-search-hl-persist activate)
								(highlight-remove-all)
								(search-highlight-persist))



				(use-package evil-surround
								:ensure t
								:config
								(global-evil-surround-mode 1))

				(use-package projectile
								:ensure t
								:config
								(define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
								)

				(use-package org
								:config
								(progn
								(defun imalison:org-inline-css-hook (exporter)
												"Insert custom inline css to automatically set the
				background of code to whatever theme I'm using's background"
												(when (eq exporter 'html)
												(let* ((my-pre-bg (face-background 'default))
																				(my-pre-fg (face-foreground 'default)))
																(setq
																org-html-head-extra
																(concat
																org-html-head-extra
																(format "<style type=\"text/css\">\n pre.src {background-color: #2c2c36; color: #959dcb;} pre.example { background-color: #2c2c36; color: #959dcb;} </style>\n"
																								my-pre-bg my-pre-fg))))))

								(add-hook 'org-export-before-processing-hook 'imalison:org-inline-css-hook)))

				(add-to-list 'org-structure-template-alist
																				'("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

				(setq org-src-fontify-natively t)

				(defconst lisp--prettify-symbols-alist
								'(("lambda"  . ?λ)))

				(global-prettify-symbols-mode +1)

				(use-package base16-theme
								:ensure t
								:config
								(setq base16-theme-256-color-source "terminal")
								(load-theme 'base16-material)
								)


				(global-prettify-symbols-mode 1)
				(org-babel-do-load-languages
								'org-babel-load-languages
								'(
								(emacs-lisp . t)
								(python . t)
								))

				(use-package org-bullets
								:init
								(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
								(setq org-bullets-bullet-list '("◉"))
								:config
								)

				(add-hook 'scheme-mode-hook 'my-pretty-lambda)
				(setq org-hide-leading-stars t)
				(setq org-bullets-face-name (quote org-bullet-face))
				(setq org-ellipsis "⤵")
				(setq org-src-tab-acts-natively t)

				(setq org-src-window-setup 'current-window)

				(add-to-list 'org-structure-template-alist
																				'("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

				(setq org-confirm-babel-evaluate nil)
				(setq org-export-with-smart-quotes t)
				(setq org-html-htmlize-output-type `nil)
				;;(add-hook 'org-mode-hook 'flyspell-mode)

				(use-package htmlize
								:ensure t
								)

				(use-package centered-cursor-mode
								:ensure t
								:config
								(global-centered-cursor-mode +1)
								)

				(use-package aggressive-indent
								:ensure t
								:config
								(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
								(add-hook 'css-mode-hook #'aggressive-indent-mode)
								(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
								)

				;; (use-package material-theme
				;;   :config
				;;   :ensure t)
				;; (load-theme 'material t)

				(use-package undo-tree
								:ensure t
								:config
								(setq undo-tree-auto-save-history t)
								)

				(use-package powerline
								:ensure t
								:config
								(set-face-background 'powerline-inactive1 "color-18")
								(set-face-background 'powerline-inactive2 "color-18")
								(set-face-background 'powerline-active2 "color-18")
								(powerline-center-evil-theme)

								;; (use-package flycheck-color-mode-line
								;;              :ensure t
								;;              :config
								;;              (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
								)

				(setq org-directory "~/Dropbox/org")

				(defun org-file-path (filename)
								"Return the absolute address of an org file, given its relative name."
								(concat (file-name-as-directory org-directory) filename))

				(setq org-inbox-file "~/Dropbox/inbox.org")
				(setq org-index-file (org-file-path "index.org"))
				(setq org-archive-location
												(concat (org-file-path "archive.org") "::* From %s"))

				(defun hrs/copy-tasks-from-inbox ()
								(when (file-exists-p org-inbox-file)
								(save-excursion
												(find-file org-index-file)
												(goto-char (point-max))
												(insert-file-contents org-inbox-file)
												(delete-file org-inbox-file))))

				(setq org-agenda-files (list org-index-file))

				(defun hrs/mark-done-and-archive ()
								"Mark the state of an org-mode item as DONE and archive it."
								(interactive)
								(org-todo 'done)
								(org-archive-subtree))

				(define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
				(setq org-log-done 'time)

				(setq org-capture-templates
												'(("b" "Blog idea"
																entry
																(file (org-file-path "blog-ideas.org"))
																"* %?\n")

												("e" "Email" entry
																(file+headline org-index-file "Inbox")
																"* TODO %?\n\n%a\n\n")

												("f" "Finished book"
																table-line (file "~/documents/notes/books-read.org")
																"| %^{Title} | %^{Author} | %u |")

												("r" "Reading"
																checkitem
																(file (org-file-path "to-read.org")))

												("s" "Subscribe to an RSS feed"
																plain
																(file "~/documents/rss/urls")
																"%^{Feed URL} \"~%^{Feed name}\"")

												("t" "Todo"
																entry
																(file+headline org-index-file "Inbox")
																"* TODO %?\n")))

				(add-hook 'org-capture-mode-hook 'evil-insert-state)

				(setq org-refile-use-outline-path t)
				(setq org-outline-path-complete-in-steps nil)

				(define-key global-map "\C-cl" 'org-store-link)
				(define-key global-map "\C-ca" 'org-agenda)
				(define-key global-map "\C-cc" 'org-capture)

				(defun hrs/open-index-file ()
								"Open the master org TODO list."
								(interactive)
								(hrs/copy-tasks-from-inbox)
								(find-file org-index-file)
								(flycheck-mode -1)
								(end-of-buffer))

				(global-set-key (kbd "C-c i") 'hrs/open-index-file)

				(defun org-capture-todo ()
								(interactive)
								(org-capture :keys "t"))

				(global-set-key (kbd "M-n") 'org-capture-todo)
				(add-hook 'gfm-mode-hook
																(lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
				(add-hook 'haskell-mode-hook
																(lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+END_SRC
